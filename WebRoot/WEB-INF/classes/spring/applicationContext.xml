<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-autowire="byName" default-merge="true">
	
	<!-- load config.properties -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath*:config.properties</value>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}" />
		
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件，
		常用的插件有：
		监控统计用的stat 日志用的log4j 防御sql注入的wall -->
		<!-- -Ddruid.log.stmt.executableSql=true -->
		<property name="filters" value="stat,log4j"/>
		
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="20" />
		
		<!-- 初始化时建立物理连接的个数.初始化发生在显示调用init方法,或者第一次getConnection时 -->
		<property name="initialSize" value="1" />
		
		<!-- 获取连接时最大等待时间，单位毫秒。
		配置了maxWait之后，缺省启用公平锁，并发效率会有所下降,如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="60000" />
		
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="1" />
		
		<!-- 有两个含义：
		1) Destroy线程会检测连接的间隔时间
		2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- 用来检测连接是否有效的sql,要求是一个查询语句
		如果validationQuery为null,testOnBorrow、testOnReturn、testWhileIdle都不会起作用 -->
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		
		<!-- 建议配置为true，不影响性能，并且保证安全性。
		申请连接的时候检测,如果空闲时间大于timeBetweenEvictionRunsMillis,
		执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		
		<!-- 申请连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="false" />
		
		<!-- 归还连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		
		<!-- 是否缓存preparedStatement，也就是PSCache。
		PSCache对支持游标的数据库性能提升巨大,比如说oracle。
		在mysql5.5以下的版本中没有PSCache功能,建议关闭掉.5.5及以上版本有PSCache,建议开启. -->
		<property name="poolPreparedStatements" value="true" />
		
		<!-- 要启用PSCache,必须配置大于0,当大于0时,poolPreparedStatements自动触发修改为true.
			在Druid中,不会存在Oracle下PSCache占用内存过多的问题,可以把这个数值配置大一些,比如说100 -->
		<property name="maxOpenPreparedStatements" value="100" />
		
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
    	<!-- 18000秒，也就是300分钟 -->
    	<property name="removeAbandonedTimeout" value="18000" />
    	<!-- 关闭abanded连接时输出错误日志 -->
    	<property name="logAbandoned" value="true" />
	</bean>

	<aop:config>
		<aop:pointcut id="txServices" expression="execution(* com.gary.framework.service.*.*.*(..))"/>
		<aop:advisor pointcut-ref="txServices" advice-ref="txAdvice"/>
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" timeout="30"/>
			<tx:method name="search*" read-only="true"/>
			<tx:method name="export*" read-only="true"/>
			<!-- 
			<tx:method name="add*"/>
			<tx:method name="save*"/>
			<tx:method name="insert*"/>
			<tx:method name="delete*"/>
			<tx:method name="update*" />
			<tx:method name="edit*"/>
			<tx:method name="upload*"/>
			<tx:method name="download*"/>
			 -->
			 <!-- ...whatever    ╮(╯_╰)╭ -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean>
	
	<!-- initialization -->
	<bean id="webUtil" class="com.gary.framework.util.WebUtil"/>
	
	<!-- annotation -->
	<!-- annotation auto register bean,split by , -->
	<context:component-scan base-package="com.gary.framework" />

	<!-- 
	<tx:annotation-driven transaction-manager="transactionManager" />
	 -->	
	
	<!-- allow @Transient -->
	<!-- 
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />
	-->
</beans>